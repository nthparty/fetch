import github


class Handler:
    def __init__(self, name: str, auth: str):
        self.repo = github.Github(auth).get_repo(name)

    def get_file(self, file_path: str, commit: [str, None]):

        content = \
            self.repo.get_contents(file_path, ref=commit) \
            if commit is not None \
            else self.repo.get_contents(file_path)

        return content.decoded_content.decode("utf-8")

    def get_files(self, files: list, commit: [str, None]):
        return [self.get_file(file, commit) for file in files]


class Fetch:

    @staticmethod
    def fetch(targets: list, auth: [str, None]):

        ret = []
        for t in targets:
            auth = t.get("token") if t.get("token") is not None else auth
            ret.append(
                Handler(t.get("name"), auth).get_files(t.get("files"), t.get("commit"))
            )

        return ret

    @staticmethod
    def build(dest: str, dependencies: list):

        with open(dest, "w") as out:
            for dep in dependencies:
                for file in dep:
                    out.write(file)
                    out.write("\n")

    def fetch_and_build(self, dest: str, targets: list, token: [str, None]):

        dependencies = self.fetch(targets, token)
        self.build(dest, dependencies)
